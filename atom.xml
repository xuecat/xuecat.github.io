<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XueCat</title>
  <subtitle>用代码创造世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xuecat.github.io/"/>
  <updated>2021-07-15T13:52:24.447Z</updated>
  <id>https://xuecat.github.io/</id>
  
  <author>
    <name>XueCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习(255)</title>
    <link href="https://xuecat.github.io/2021/07/15/255/"/>
    <id>https://xuecat.github.io/2021/07/15/255/</id>
    <published>2021-07-15T11:27:38.000Z</published>
    <updated>2021-07-15T13:52:24.447Z</updated>
    
    <content type="html"><![CDATA[<p>索引类型：</p>
<pre><code>普通索引：最基本的索引，没有任何限制

唯一索引：与&quot;普通索引&quot;类似，不同的就是：索引列的值必须唯一，但允许有空值。

主键索引：它 是一种特殊的唯一索引，不允许有空值。 

全文索引：仅可用于 MyISAM 表，针对较大的数据，生成全文索引很耗时好空间。

组合索引：为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。
</code></pre><p>索引结构： B-tree索引 哈希索引 全文索引</p>
<p>不要使用索引情况：</p>
<pre><code>区分度不是很大的字段
频繁更新的字段
字符串类型的字段 或者 文本类型的字段
不在where列中出现的索引
</code></pre><p>索引失效：</p>
<pre><code>* 查询列中有函数计算     
* 查询列中有模糊查询，&quot;%cloum&quot;,&quot;%cloum%&quot;,可以使用&quot;cloum%&quot; 代替。实在用这个索引,新增一列（使用`LOCATE` `POSITION`函数也可以加索引），存储该字段的反转。比如原字段是abcd，取反存储为dcba，查询%bcd改成查dcb%
* 如果查询条件中有or, 索引会失效，除非所有条件都加上索引
* 使用不等于(!= 或者 &lt;&gt;)
* is null 或者 is not null
* 字符串不加引号，会导致索引失效
* 没有最左原则
</code></pre><ol>
<li><p><code>最左前缀</code> </p>
<p><code>explain</code> type为all表示全文扫描。type为ref，表示使用非唯一索引扫描或唯一索引扫描</p>
</li>
</ol>
<ul>
<li>只有复合索引才会有所谓的左和右之分</li>
<li>查询从索引的最左前列开始并且不跳过索引中的列,通俗易懂的来说就是:带头大哥不能死、中间兄弟不能断</li>
</ul>
<p><img src="/picture/255.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;索引类型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;普通索引：最基本的索引，没有任何限制

唯一索引：与&amp;quot;普通索引&amp;quot;类似，不同的就是：索引列的值必须唯一，但允许有空值。

主键索引：它 是一种特殊的唯一索引，不允许有空值。 

全文索引：仅可用于 MyISAM 表
    
    </summary>
    
      <category term="面试" scheme="https://xuecat.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="工具" scheme="https://xuecat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置(254)</title>
    <link href="https://xuecat.github.io/2020/11/02/254/"/>
    <id>https://xuecat.github.io/2020/11/02/254/</id>
    <published>2020-11-02T14:30:42.000Z</published>
    <updated>2020-11-02T14:48:55.083Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">name=ingestdbsvr</div><div class="line"><span class="keyword">version</span>=1.8.5</div><div class="line">time=$(date +%Y%<span class="keyword">m</span>%<span class="keyword">d</span>%<span class="keyword">H</span>)</div><div class="line">images=<span class="variable">$&#123;name&#125;</span>:<span class="variable">$&#123;version&#125;</span>.<span class="variable">$&#123;time&#125;</span>.<span class="variable">$&#123;BUILD_NUMBER&#125;</span></div><div class="line">tarname=<span class="variable">$&#123;images&#125;</span>.tar</div><div class="line">pushurl=172.16.128.170:5000/<span class="variable">$&#123;images&#125;</span></div><div class="line">date +%<span class="keyword">H</span>:%<span class="keyword">M</span>:%<span class="built_in">S</span></div><div class="line">dotnet build -c Release  IngestDB.sln</div><div class="line"><span class="keyword">cd</span> IngestDB </div><div class="line">dotnet publish -c Release -o ../publish</div><div class="line"><span class="keyword">cd</span> ..</div><div class="line">cp BinU/netcoreapp2.1/IngestDB.dll -r publish/</div><div class="line">cp BinU/netcoreapp2.1/IngestDBCore.dll -r publish/</div><div class="line"></div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestMatrixPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestDeviceInterfacePlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestGlobalInterfacePlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestTaskInterfacePlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestTaskPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestDevicePlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/MSVNotifyPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/IngestGlobalPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/KafKaNotifyPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line">cp BinU/netcoreapp2.1/<span class="keyword">Plugin</span>/UdpNotifyPlugin.dll -r publish/<span class="keyword">Plugin</span>/</div><div class="line"></div><div class="line">#docker images | grep 'ingestdbsvr' | awk '&#123;<span class="keyword">print</span> <span class="variable">$3&#125;</span>' | xargs docker rmi</div><div class="line">chmod -Rf 777 publish</div><div class="line">docker build -t <span class="variable">$images</span> .</div><div class="line">docker tag <span class="variable">$images</span> <span class="variable">$pushurl</span></div><div class="line">docker push <span class="variable">$pushurl</span></div><div class="line"></div><div class="line">time=$(date +%Y%<span class="keyword">m</span>%<span class="keyword">d</span>%<span class="keyword">H</span>)</div><div class="line">appname=ingestdbsvr</div><div class="line"><span class="keyword">version</span>=1.8.5.<span class="variable">$&#123;time&#125;</span>.<span class="variable">$&#123;BUILD_NUMBER&#125;</span></div><div class="line">images=<span class="variable">$&#123;appname&#125;</span>:<span class="variable">$&#123;version&#125;</span></div><div class="line">Oldtag=`docker images|grep <span class="variable">$&#123;appname&#125;</span>|awk '&#123;<span class="keyword">print</span> <span class="variable">$2&#125;</span>'|<span class="keyword">sort</span> -r|awk 'NR==1&#123;<span class="keyword">print</span>&#125;'`</div><div class="line">container=`docker ps -a|grep <span class="variable">$&#123;appname&#125;</span>|awk '&#123;<span class="keyword">print</span> <span class="variable">$1&#125;</span>'|<span class="keyword">sort</span> -r|awk 'NR==1&#123;<span class="keyword">print</span>&#125;'`</div><div class="line">echo  <span class="variable">$&#123;appname&#125;</span>-<span class="variable">$&#123;Oldtag&#125;</span></div><div class="line">echo <span class="variable">$&#123;appname&#125;</span>-<span class="variable">$&#123;version&#125;</span></div><div class="line">echo <span class="variable">$&#123;appname&#125;</span>:<span class="variable">$&#123;container&#125;</span></div><div class="line">docker stop <span class="variable">$&#123;container&#125;</span></div><div class="line">docker <span class="keyword">rm</span> -f <span class="variable">$&#123;container&#125;</span></div><div class="line"><span class="keyword">mkdir</span> /sobeyhive/<span class="keyword">app</span>/<span class="variable">$&#123;appname&#125;</span>-<span class="variable">$&#123;version&#125;</span></div><div class="line">cp -rp /sobeyhive/<span class="keyword">app</span>/<span class="variable">$&#123;appname&#125;</span>-notchange/<span class="keyword">run</span>.<span class="keyword">sh</span> /sobeyhive/<span class="keyword">app</span>/<span class="variable">$&#123;appname&#125;</span>-<span class="variable">$&#123;version&#125;</span>/</div><div class="line"><span class="keyword">rm</span> -fr  /sobeyhive/<span class="keyword">app</span>/<span class="variable">$&#123;appname&#125;</span>-<span class="variable">$&#123;Oldtag&#125;</span> </div><div class="line"><span class="keyword">cd</span> /RunScript/ </div><div class="line"><span class="keyword">sh</span> ingestdbsvrsrg.<span class="keyword">sh</span>  <span class="variable">$&#123;version&#125;</span></div><div class="line"><span class="keyword">sleep</span> 5</div><div class="line"></div><div class="line">scp -r  /other/sobeyhive/<span class="keyword">app</span>/ingestmsgsvr-1.6.0/ingestmsgsvr<span class="comment">/* root@172.16.128.117:/other/jenkins/workspace/IngestMsgSvr-Integration-SRG1.8.5/publish/   </span></div><div class="line"> </div><div class="line">sleep 1</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="配置" scheme="https://xuecat.github.io/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="工具" scheme="https://xuecat.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>c#语法糖253</title>
    <link href="https://xuecat.github.io/2020/10/22/253/"/>
    <id>https://xuecat.github.io/2020/10/22/253/</id>
    <published>2020-10-22T14:13:33.000Z</published>
    <updated>2020-11-03T15:27:26.820Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://help.semmle.com/wiki/display/CSHARP/Abstract+class+only+declares+common+constants" target="_blank" rel="external">原文章地址</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/picture/253_11.jpg" alt=""></h2><ol>
<li><code>abstract</code>类最好用来声明公共<code>const</code>变量</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Bad</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MathConstants</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">double</span> Pi = <span class="number">3.14</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">MathConstants</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">double</span> radius;</div><div class="line"> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Area</span>(<span class="params"></span>) </span>=&gt; Math.Pow(radius, <span class="number">2</span>) * Pi;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>ReadOnlyCollection</code>替换<code>Array</code>的<code>readonly</code></li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//错误</span></div><div class="line"><span class="keyword">class</span> <span class="title">Bad</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] Foo = &#123; <span class="string">"hello"</span>, <span class="string">"world"</span> &#125;;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        Foo[<span class="number">0</span>] = <span class="string">"goodbye"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//对的</span></div><div class="line"><span class="keyword">class</span> <span class="title">Good</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ReadOnlyCollection&lt;<span class="keyword">string</span>&gt; Foo</div><div class="line">        = <span class="keyword">new</span> ReadOnlyCollection&lt;<span class="keyword">string</span>&gt;(<span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"hello"</span>, <span class="string">"world"</span> &#125;);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>Assembly</code>的代码</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssemblyPathInjectionHandler</span> : <span class="title">IHttpHandler</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext ctx</span>) </span>&#123;</div><div class="line">    <span class="keyword">string</span> configType = ctx.Request.QueryString[<span class="string">"configType"</span>];</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (configType.equals(<span class="string">"configType1"</span>) || configType.equals(<span class="string">"configType2"</span>)) &#123;</div><div class="line">      <span class="comment">// GOOD: Loaded assembly is one of the two known safe options</span></div><div class="line">      <span class="keyword">var</span> safeAssembly = Assembly.LoadFile(<span class="string">@"C:\SafeLibraries\"</span> + configType + <span class="string">".dll"</span>);</div><div class="line"> </div><div class="line">      <span class="comment">// Code execution is limited to one of two known and vetted assemblies</span></div><div class="line">      MethodInfo m = safeAssembly.GetType(<span class="string">"Config"</span>).GetMethod(<span class="string">"GetCustomPath"</span>);</div><div class="line">      Object customPath = m.Invoke(<span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>Cyclomatic Complexity(圈复杂度)</p>
</li>
<li><p><code>dynamic</code> 弱语言的东西类似js的结构体，和模板搭配很好用</p>
</li>
<li><p><code>Obsolete</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="name">Obsolete</span>(<span class="string">"该方法已被弃用，请使用NewMethod代替"</span>)]</div><div class="line">static void OldMethod()</div></pre></td></tr></table></figure>
</li>
<li><p><code>abstract</code>属性可以通过继承覆盖<br>···<br>public abstract class Shape<br>{<br> private string name;</p>
<p> public Shape(string s)<br> {</p>
<pre><code>// calling the set accessor of the Id property.
Id = s;
</code></pre><p> }<br> public string Id<br> {</p>
<pre><code>get
{
    return name;
}

set
{
    name = value;
}
</code></pre><p> }</p>
<p> // Area is a read-only property - only a get accessor is needed:<br> public abstract double Area<br> {</p>
<pre><code>get;
</code></pre><p> }</p>
<p> public override string ToString()<br> {</p>
<pre><code>return $&quot;{Id} Area = {Area:F2}&quot;;
</code></pre><p> }<br>}<br>public class Square : Shape<br>{<br> private int side;</p>
<p> public Square(int side, string id)</p>
<pre><code>: base(id)
</code></pre><p> {</p>
<pre><code>this.side = side;
</code></pre><p> }</p>
<p> public override double Area<br> {</p>
<pre><code>get
{
    // Given the side, return the area of a square:
    return side * side;
}
</code></pre><p> }<br>}</p>
</li>
</ol>
<p>···</p>
<ol>
<li><p><code>is</code>的规则</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">Animal</span> &#123; &#125;</div><div class="line"><span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span> &#123; &#125;</div><div class="line"><span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span> &#123; &#125;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">&#123;</div><div class="line">    List&lt;Animal&gt; animals = <span class="keyword">new</span> List&lt;Animal&gt; &#123; <span class="keyword">new</span> Cat(), <span class="keyword">new</span> Dog() &#125;;</div><div class="line">    <span class="keyword">foreach</span> (Animal a <span class="keyword">in</span> animals)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (a <span class="keyword">is</span> Cat)</div><div class="line">            Console.WriteLine(<span class="string">"Miaow!"</span>);</div><div class="line">        <span class="keyword">if</span> (a <span class="keyword">is</span> Dog)</div><div class="line">            Console.WriteLine(<span class="string">"Woof!"</span>);</div><div class="line">        <span class="keyword">if</span> (a <span class="keyword">is</span> Animal)</div><div class="line">            Console.WriteLine(<span class="string">"Animal!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Console.ReadLine();</div><div class="line">    Console.ReadKey();</div><div class="line">&#125;<span class="comment">// Miaow Animal Woof Animal</span></div></pre></td></tr></table></figure>
</li>
<li><p>引用用类型,值类型比较</p>
</li>
</ol>
<p>引用类型:<br><code>ReferenceEquals(null, x)</code>比较是否是指向同一内存<br>虚函数<code>Equals</code></p>
<p>值类型:<br><code>==</code>运算符比较</p>
<ol>
<li>双重检查<code>lock</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://help.semmle.com/wiki/display/CSHARP/Abstract+class+only+declares+common+constants&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文章地址&lt;
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>EF Core Linq(252)</title>
    <link href="https://xuecat.github.io/2020/03/29/252/"/>
    <id>https://xuecat.github.io/2020/03/29/252/</id>
    <published>2020-03-29T02:42:32.000Z</published>
    <updated>2020-05-06T14:35:00.749Z</updated>
    
    <content type="html"><![CDATA[<p>EF默认情况下对数据的访问都是启用模型跟踪</p>
<p>使用AsNoTracking方法查询返回无变动跟踪的Province的DbSet，由于是无变动跟踪，所以对返回的Province集中数据的任何修改，在SaveChanges()时，都不会提交到数据库中</p>
<ul>
<li>无跟踪查询而已，也就是说查询出来的对象不能直接做修改。所以，我们在做数据集合查询显示，而又不需要对集合修改并更新到数据库的时候，一定不要忘记加上AsNoTracking。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">using (<span class="built_in">var</span> context = <span class="literal">new</span> MyDbContext())</div><div class="line">&#123;</div><div class="line">   <span class="built_in">var</span> <span class="built_in">data</span> = context.Orders</div><div class="line">      .Include(c =&gt; c.OrderLines)</div><div class="line">      .<span class="keyword">Select</span>(c =&gt; <span class="literal">new</span> &#123; OrderObj = c, Lines = c.OrderLines&#125;)</div><div class="line">      .AsNoTracking()<span class="comment">//除非去掉这句不然不会更新</span></div><div class="line">      .FirstOrDefault();</div><div class="line"> </div><div class="line">   <span class="built_in">data</span>.OrderObj.Number = <span class="string">"#ABC123"</span>;</div><div class="line"> </div><div class="line">   context.SaveChanges();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果查询过程做了select映射就不需要加AsNoTracking。如：db.Students.Where(t=&gt;t.Name.Contains(“张三”)).select(t=&gt;new (t.Name,t.Age)).ToList();</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导出部分属性列，提高效率</span></div><div class="line">.AsNoTracking()</div><div class="line">   .Select(item =&gt;</div><div class="line">   <span class="keyword">new</span> ProductViewModel</div><div class="line">   &#123;</div><div class="line">       Product = item,</div><div class="line"></div><div class="line">       NoOfProducts = item.Comments.Count</div><div class="line"></div><div class="line">  &#125;).ToListAsync());</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//同理</span></div><div class="line">  <span class="keyword">var</span> <span class="keyword">list</span> = context.Bloggers</div><div class="line">    .<span class="keyword">Include</span>(x =&gt; x.Posts)</div><div class="line">    .ToList();</div></pre></td></tr></table></figure>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//更新单列</span></div><div class="line"><span class="comment">//这个方法需要注意一点，就是禁止多个跟踪。假如前面用track方式`where`选出了一些对象，由于这些对象被跟踪了，再用这个方法`attach`添加跟踪就会异常。除非用同一个对象更新</span></div><div class="line">using (<span class="type">TestDBContext</span> testDBContext = <span class="function"><span class="keyword">new</span> <span class="title">TestDBContext</span>())</span></div><div class="line">&#123;</div><div class="line">    <span class="title">Person</span> <span class="title">person</span> = <span class="title">new</span> <span class="title">Person</span>() &#123; <span class="title">Code</span> = "<span class="title">A</span>" ,<span class="title">Name</span>="<span class="title">Tom</span>"&#125;;<span class="comment">//列Code是Key，声明Key属性列Code的值，及要修改的列Name的值</span></div><div class="line"></div><div class="line">    <span class="title">testDBContext</span>.<span class="title">Attach</span>(person);<span class="comment">//告诉EF Core开始跟踪person实体的更改，因为调用DbContext.Attach方法后，EF Core会将person实体的State值（可以通过testDBContext.Entry(person).State查看到）更改回EntityState.Unchanged，所以这里testDBContext.Attach(person)一定要放在下面一行testDBContext.Entry(person).</span></div><div class="line">    </div><div class="line">    <span class="title">Property</span>(p =&gt; p.<span class="type">Name</span>).<span class="title">IsModified</span> = <span class="title">true</span>的前面，否者后面的<span class="title">testDBContext</span>.<span class="title">SaveChanges</span>方法调用后，数据库不会被更新</div><div class="line">    <span class="title">testDBContext</span>.<span class="title">Entry</span>(person).<span class="title">Property</span>(p =&gt; p.<span class="type">Name</span>).<span class="title">IsModified</span> = <span class="title">true</span>;<span class="comment">//告诉EF Core实体person的Name属性已经更改。将testDBContext.Entry(person).Property(p =&gt; p.Name).IsModified设置为true后，也会将person实体的State值（可以通过testDBContext.Entry(person).State查看到）更改为EntityState.Modified，这样就保证了下面SaveChanges的时候会将person实体的Name属性值Update到数据库中。</span></div><div class="line">    <span class="title">testDBContext</span>.<span class="title">SaveChanges</span>();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">context</span>.<span class="title">Attach</span>(person);</div><div class="line"><span class="title">context</span>.<span class="title">Entry</span>(person).<span class="title">Property</span>("<span class="type">Name</span>").<span class="title">IsModified</span> = <span class="title">true</span>;</div><div class="line"><span class="title">context</span>.<span class="title">SaveChanges</span>();</div><div class="line"></div><div class="line"><span class="comment">//更新还有个mysql坑，那就是int主键默认是0。因为主键ID默认是不赋值的，只给其他项目赋值了 id是int类型，int类型如果不允许为空那么会被默认为0，所以插入第二条数据时，数据库中已经有了主键为0的数据</span></div><div class="line"></div><div class="line"><span class="comment">//modelBuilder.Entity&lt;Person&gt;(entity =&gt;</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//    entity.Property(e =&gt; e.Id).ValueGeneratedOnAdd();//这句会用到的</span></div><div class="line"><span class="comment">//    entity.HasKey(e =&gt; e.Code);//声明列Code是实体的Key属性</span></div><div class="line"><span class="comment">//&#125;);</span></div></pre></td></tr></table></figure>
<h3 id="自定义标量函数"><a href="#自定义标量函数" class="headerlink" title="自定义标量函数"></a>自定义标量函数</h3><p> Entity Framework Core 有一个重要特性就是自定义标量函数。<br> 自定义标量函数可以将数据库中的标量函数映射到类中的方法，并且在使用 LINQ 查询时会用到</p>
<p> 我看例子他们还可以映射数据的函数<code>Average</code> <code>Max</code> <code>Min</code>等<br> ···</p>
<p> [DbFunction(FUNCTIONnAME=”sdf”,Schema=”dd”)]<br> public static string my()<br> {}</p>
<p> //调用<br> public int GetNextValId(string value)<br> {<br>   return Context.DbpTask.Select(x =&gt; IngestTaskDBContext.next_val(value)).FirstOrDefault();<br> }<br> ···</p>
<h3 id="显式编译查询"><a href="#显式编译查询" class="headerlink" title="显式编译查询"></a>显式编译查询</h3><p>一般的<code>NoTracking()</code>查询，此时要经过编译翻译阶段最终返回实际结果，比如在Web网站上这样的请求很频繁，此时将严重影响响应速度导致页面加载数据过慢。</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">async</span> Task&lt;Blog&gt; GetBlogAsync(EFCoreDbContext context, <span class="built_in">int</span> id)</div><div class="line">&#123;</div><div class="line">   Func&lt;EFCoreDbContext, <span class="built_in">int</span>, Task&lt;Blog&gt;&gt; blog = EF.CompileAsyncQuery((EFCoreDbContext context, <span class="built_in">int</span> Id) =&gt;</div><div class="line">         context.Blogs.Include(c =&gt; c.Posts)</div><div class="line">                  .Where(c =&gt; c.Id == Id)</div><div class="line">                  .FirstOrDefault());</div><div class="line">   <span class="keyword">return</span> <span class="keyword">await</span> blog(context, id);</div><div class="line">&#125;</div><div class="line"><span class="comment">//提前把查询编译好，再直接返回查询结果的方式</span></div></pre></td></tr></table></figure>
<h3 id="延时加载技术"><a href="#延时加载技术" class="headerlink" title="延时加载技术"></a>延时加载技术</h3><p>用的时候才会加载</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EF默认情况下对数据的访问都是启用模型跟踪&lt;/p&gt;
&lt;p&gt;使用AsNoTracking方法查询返回无变动跟踪的Province的DbSet，由于是无变动跟踪，所以对返回的Province集中数据的任何修改，在SaveChanges()时，都不会提交到数据库中&lt;/p&gt;
&lt;ul
    
    </summary>
    
      <category term="服务器" scheme="https://xuecat.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Mysql" scheme="https://xuecat.github.io/tags/Mysql/"/>
    
      <category term="Asp.Net" scheme="https://xuecat.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>Orleans新记录(251)</title>
    <link href="https://xuecat.github.io/2020/02/02/251/"/>
    <id>https://xuecat.github.io/2020/02/02/251/</id>
    <published>2020-02-02T04:31:32.000Z</published>
    <updated>2020-07-22T15:55:16.113Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Grain Identity</em></strong></p>
<ul>
<li>获取key有多样的（继承多样：<code>IGrainWithIntegerKey</code>）</li>
</ul>
<p><strong><em>Timers and Reminders</em></strong></p>
<ul>
<li><p><strong><em>Observers</em></strong></p>
</li>
<li>服务端<code>ObserverSubscriptionManager&lt;&gt;</code> <code>IGrainObserver</code>保持订阅列表，调相应接口来进行通知对应订阅</li>
<li>客户端<code>CreateObjectReference</code> <code>Subscribe</code>向服务器订阅</li>
</ul>
<p><strong><em>Reentrancy</em></strong></p>
<ul>
<li>grain类用<code>[Reentrant]</code>能完全异步，外部调它的方法顺序全是乱的。</li>
<li><code>[AlwaysInterleave]</code>单个方法异步</li>
<li>如果没有异步要注意方法里面出现<code>GetGrain</code>导致的<code>grain</code>之间互相调用会死锁</li>
<li>服务端可以写个属性来进行动态异步交错(感觉没啥用呢)</li>
</ul>
<p><strong><em>RequestContext</em></strong></p>
<ul>
<li>客户端<code>RequestContext.Set</code>，服务端<code>RequestContext.Get</code>它将与Orleans请求一起流向接收谷物;<br>应用程序元数据不会随响应一起流回<br>应用场景：请求从客户端到服务器跟踪流程用</li>
</ul>
<p><strong><em>JournaledGrain</em></strong><br>这个很有用，<code>event</code>和<code>state</code>绑定，通过事件更新状态，注意读写状态</p>
<p><strong><em>外部的任务和grain</em></strong><br>1） await，Task.Factory.StartNew，Task.ContinuewWith，Task.WhenAny，Task.WhenAll，Task.Delay都遵循当前的任务计划。这意味着以默认方式使用它们，无需传递不同的TaskScheduler，它们会在grain上下文中执行。</p>
<p>2）Task.Factory.FromAsync的Task.Run和endMethod委托，都不遵循当前的任务调度程序。它们都使用TaskScheduler.Default调度程序，即.NET线程池任务调度程序。</p>
<p><strong><em>拦截器</em></strong><br>1) 客户端调用<code>grain</code>用呼出，可以向<code>RequestContext</code>添加认证的东西<br>2} 服务端<code>grain</code>配置呼入,检查每个调用请求</p>
<p><strong><em>GrainServices</em></strong><br>GrainService是一种特殊的grain；它没有身份标识，并且在每个silo中运行，从silo的启动到关闭。</p>
<ul>
<li>如果可能，使GrainService可重入，以获得更好的性能</li>
<li>GrainService无法写入Orleans流，因为它不能在grain任务调度程序中工作</li>
</ul>
<p>有点像数据服务的代理，其他grain注入这个来访问数据啥的</p>
<p><strong><em>无状态grain</em></strong></p>
<ul>
<li>对无状态工作器grain的请求总是在本地执行，身份标识是 0或Guid.Empty</li>
</ul>
<p><strong><em>事务</em></strong><br>需要配合存储使用</p>
<p><strong><em>启动任务</em></strong><br>在许多情况下，一旦silo可用，就需要自动执行某些任务。启动任务提供此功能。</p>
<p>一些用例包括但不限于：</p>
<ul>
<li>启动后台计时器，以执行周期性的”家务”式的任务</li>
<li>使用从外部的后备存储下载的数据，预加载一些缓存的grain</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Grain Identity&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取key有多样的（继承多样：&lt;code&gt;IGrainWithIntegerKey&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Timers 
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="分布式" scheme="https://xuecat.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Orleans" scheme="https://xuecat.github.io/tags/Orleans/"/>
    
  </entry>
  
  <entry>
    <title>for(;;)和while(true)(250)</title>
    <link href="https://xuecat.github.io/2019/12/11/250/"/>
    <id>https://xuecat.github.io/2019/12/11/250/</id>
    <published>2019-12-11T15:39:46.000Z</published>
    <updated>2019-12-11T15:46:02.681Z</updated>
    
    <content type="html"><![CDATA[<p>比较结果<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">while(1)</div><div class="line"></div><div class="line">mov eax,1</div><div class="line"><span class="keyword">test </span>eax,eax</div><div class="line">je foo<span class="string">+23</span>h</div><div class="line">jmp foo<span class="string">+18</span>h</div><div class="line"></div><div class="line"></div><div class="line">for(;;)</div><div class="line"></div><div class="line">jmp foo<span class="string">+23</span>h</div></pre></td></tr></table></figure></p>
<p>总结:for (;;):1.指令少2.不占用寄存器3.没有判断跳转,并不是不能跳出</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比较结果&lt;br&gt;&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>服务器记录(249)</title>
    <link href="https://xuecat.github.io/2019/10/28/249/"/>
    <id>https://xuecat.github.io/2019/10/28/249/</id>
    <published>2019-10-28T15:22:06.000Z</published>
    <updated>2019-10-28T15:33:30.154Z</updated>
    
    <content type="html"><![CDATA[<p>  最近优化了些服务器做下记录</p>
<ol>
<li>httpclient的使用<blockquote>
<p>httpclient不能立即关闭，会占用资源，并发量一大就耗尽。所以.net core 会使用如下:</p>
</blockquote>
</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GitHubClient</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> HttpClient Client &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GitHubClient</span>(<span class="params">HttpClient httpClient</span>)</span></div><div class="line">    &#123;</div><div class="line">        httpClient.BaseAddress = <span class="keyword">new</span> Uri(<span class="string">"https://api.github.com/"</span>);</div><div class="line">        httpClient.DefaultRequestHeaders.Add(<span class="string">"Accept"</span>, <span class="string">"application/vnd.github.v3+json"</span>);</div><div class="line">        httpClient.DefaultRequestHeaders.Add(<span class="string">"User-Agent"</span>, <span class="string">"HttpClientFactory-Sample"</span>);</div><div class="line">        Client = httpClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">GetData</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">await</span> _client.GetStringAsync(<span class="string">"/"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">services.AddHttpClient&lt;GitHubClient&gt;();</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValuesController</span> : <span class="title">BaseController</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> GitHubClient _gitHubClient;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValuesController</span>(<span class="params">GitHubClient gitHubClient</span>)</span></div><div class="line">    &#123;</div><div class="line">        _gitHubClient = gitHubClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpGet]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">Get</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">string</span> result = <span class="keyword">await</span> _gitHubClient.GetData();</div><div class="line">        <span class="keyword">return</span> Ok(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我的做法是使用全局static来控制。</p>
<ol>
<li><p>在异步方法中，不要使用 Thread.Sleep；在同步方法中，不要使用Task.Delay ，否则可能出现线程死锁，结果难出来。</p>
</li>
<li><p>吞吐量（TPS）、QPS（每秒查询率）、并发数、响应时间（RT）<br>当时为了增加qps，把所有webapi接口都改成异步请求</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近优化了些服务器做下记录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;httpclient的使用&lt;blockquote&gt;
&lt;p&gt;httpclient不能立即关闭，会占用资源，并发量一大就耗尽。所以.net core 会使用如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol
    
    </summary>
    
      <category term="服务器" scheme="https://xuecat.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="分布式" scheme="https://xuecat.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单元测试白盒(248)</title>
    <link href="https://xuecat.github.io/2019/05/19/248/"/>
    <id>https://xuecat.github.io/2019/05/19/248/</id>
    <published>2019-05-19T07:31:39.000Z</published>
    <updated>2019-09-04T15:49:31.737Z</updated>
    
    <content type="html"><![CDATA[<p><em>昨天下雨了!好像！</em><br><blockquote><p>外面风雨琳琅，漫山遍野都是今天。</p>
</blockquote></p>
<h2 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h2><p>  vs支持的白盒测试项目的编写。一般用来测试接口的</p>
<ul>
<li>测试项目引用必须引用到实体项目</li>
<li>测试项目链接必须连接到实体项目中间文件: ../test/Debug/test.obj.</li>
<li>包含头文件 <code>#include &quot;../test/test.h&quot;</code></li>
</ul>
<hr>
<p>  c#的要简单点，直接引用项目，然后调用就可以了。<br>  唯一的问题在于dot net core的测试项目的创建。mstest,nunit,xunit这三个项目，好像社区用xunit来创建多些，还能跨平台。</p>
<hr>
<p>  <code>Assert.Equal</code>几乎都是用这个。</p>
<p><strong>然后看同步的测试项目：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;昨天下雨了!好像！&lt;/em&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;外面风雨琳琅，漫山遍野都是今天。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试项目&quot;&gt;&lt;a href=&quot;#测试项目&quot; class=&quot;headerlink&quot; title=&quot;测试项目&quot;
    
    </summary>
    
      <category term="测试" scheme="https://xuecat.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="编译器和VC" scheme="https://xuecat.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8CVC/"/>
    
      <category term="学习看书笔记" scheme="https://xuecat.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%9C%8B%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>资源问题(247)</title>
    <link href="https://xuecat.github.io/2018/11/26/247/"/>
    <id>https://xuecat.github.io/2018/11/26/247/</id>
    <published>2018-11-26T13:58:52.000Z</published>
    <updated>2018-11-26T14:13:05.162Z</updated>
    
    <content type="html"><![CDATA[<p> 今天说给收录写个新功能来着，搞半天老是资源错误，”试图执行的操作不受支持”。气死人了。<br> 最后想起在DoDataExchange下个断点，一个一个的找资源控件问题，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 今天说给收录写个新功能来着，搞半天老是资源错误，”试图执行的操作不受支持”。气死人了。&lt;br&gt; 最后想起在DoDataExchange下个断点，一个一个的找资源控件问题，&lt;/p&gt;

    
    </summary>
    
      <category term="Windows" scheme="https://xuecat.github.io/categories/Windows/"/>
    
    
      <category term="mfc" scheme="https://xuecat.github.io/tags/mfc/"/>
    
  </entry>
  
  <entry>
    <title>高性能mysql(246)</title>
    <link href="https://xuecat.github.io/2018/10/22/246/"/>
    <id>https://xuecat.github.io/2018/10/22/246/</id>
    <published>2018-10-22T15:52:18.000Z</published>
    <updated>2019-09-04T16:13:52.090Z</updated>
    
    <content type="html"><![CDATA[<p><strong>schema</strong></p>
<ul>
<li><p>尽量避免<code>NULL</code>, 可为<code>NULL</code>的列使得索引 索引统计和值比较都更为复杂，可为<code>NULL</code>的列会使用更多空间</p>
</li>
<li><p>整数类型, INT(11),并不会限制值的合法范围,只是规定MYSQL显示字符的个数;<code>DECIMAL</code>是浮点型</p>
</li>
<li><p>字符类型,<code>VARCHAR</code>存储变长字符串,比定长<code>CHAR</code>(md5等这种来存储)更省空间.会额外多1到2个字节来存储长度</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;schema&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;尽量避免&lt;code&gt;NULL&lt;/code&gt;, 可为&lt;code&gt;NULL&lt;/code&gt;的列使得索引 索引统计和值比较都更为复杂，可为&lt;code&gt;NULL&lt;/code&gt;的列会使用更多空间&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="数据库" scheme="https://xuecat.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="https://xuecat.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql(245)</title>
    <link href="https://xuecat.github.io/2018/09/23/245/"/>
    <id>https://xuecat.github.io/2018/09/23/245/</id>
    <published>2018-09-22T17:39:53.000Z</published>
    <updated>2018-09-22T17:46:44.403Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>约束</p>
<ul>
<li>非空约束(not null)</li>
<li>唯一性约束(unique)</li>
<li>主键约束(primary key) PK</li>
<li>外键约束(foreign key) FK</li>
<li>检查约束(目前MySQL不支持、Oracle支持)</li>
</ul>
</li>
<li><p>非空约束</p>
<ul>
<li><code>name varchar(32) not null</code></li>
</ul>
</li>
<li><p>唯一约束 (表之间插入相同值会报错)</p>
<ul>
<li><code>email varchar(128) unique</code></li>
<li><code>email varchar(128), unique(name,email)</code></li>
<li><code>constraint t_user_email_unique unique(email)</code>给约束表起名,方便以后删除</li>
</ul>
</li>
<li><p>主键约束</p>
<ul>
<li><code>id int(10) primary key</code> 单一列级</li>
<li><code>constraint t_user_id_pk primary key(id)</code> 单一表级</li>
<li><code>primary key(id,name)</code> 符合表级</li>
<li>主键自增 <figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">reate table <span class="title">t_user</span>(<span class="params"></span></span></div><div class="line"> id <span class="keyword">int</span>(<span class="number">10</span>) primary key auto_increment,</div><div class="line"> name <span class="title">varchar</span>(<span class="params"><span class="number">32</span></span>) not <span class="literal">null</span></div><div class="line"> );</div><div class="line"></div><div class="line"><span class="function">insert <span class="keyword">into</span> <span class="title">t_user</span>(<span class="params">name</span>) <span class="title">values</span>(<span class="params"><span class="string">'jay'</span></span>)</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_user</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>外键约束</p>
</li>
</ul>
<ul>
<li><code>FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)</code></li>
</ul>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p><code>字段建立索引可以大大提升查询速度</code></p>
<ul>
<li><p>普通索引</p>
<ul>
<li><code>CREATE INDEX indexName ON mytable(username(length))</code></li>
<li><code>CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, INDEX [indexName] (username(length)) )</code></li>
</ul>
</li>
<li><p>唯一索引<br>  它必须唯一,但允许有空值</p>
<ul>
<li><code>CREATE UNIQUE INDEX indexName ON mytable(username(length))</code></li>
<li><code>CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, UNIQUE [indexName] (username(length)) )</code></li>
</ul>
</li>
<li><p>主键索引<br>  唯一且不允许空</p>
<ul>
<li><code>CREATE TABLE mytable( ID INT NOT NULL, username VARCHAR(16) NOT NULL, PRIMARY KEY(ID) );</code></li>
</ul>
</li>
<li><p>组合索引</p>
<ul>
<li><code>ALTER TABLE mytable ADD INDEX name_city_age (name(10),city,age);</code></li>
</ul>
</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>varchar最好在1024以内,虽然它能支持到6553;其它用blob和text来代替</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非空约束(not null)&lt;/li&gt;
&lt;li&gt;唯一性约束(unique)&lt;/li&gt;
&lt;li&gt;主键约束(primary key) PK&lt;/li&gt;
&lt;li&gt;外键约束(foreign key) FK&lt;/li&gt;
&lt;li&gt;检查约束(
    
    </summary>
    
      <category term="数据库" scheme="https://xuecat.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mysql" scheme="https://xuecat.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Xsum问题(243)</title>
    <link href="https://xuecat.github.io/2018/09/04/243/"/>
    <id>https://xuecat.github.io/2018/09/04/243/</id>
    <published>2018-09-04T14:40:16.000Z</published>
    <updated>2018-09-25T15:38:00.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xsum问题"><a href="#xsum问题" class="headerlink" title="xsum问题"></a>xsum问题</h3><ul>
<li><p>2sum</p>
<ul>
<li><p>map结构时间复杂度O(n)<br>map把那些离target有差距的都存起来，等target-nums[i]有对应值时，就表示达到了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">int</span> len = nums.size();</div><div class="line">    <span class="keyword">if</span> ( len &lt; <span class="number">2</span>) </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (mp[target - nums[i]] != <span class="number">0</span>)&#123;</div><div class="line">            res.push_back(mp[target - nums[i]] - <span class="number">1</span>);<span class="comment">//减去加的那个1</span></div><div class="line">            res.push_back(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            mp[nums[i]] = i + <span class="number">1</span>;<span class="comment">//故意加了1是为了防止为0,这样好判断这个键-值是否存在</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//sort(res.begin(), res.end());</span></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>先对数据进行排序，如果用STL的sort快排，时间复杂度为O(nlogn)，然后设置两个指针，一个初始化为数组的头，一个初始化在数组的尾，然后两边向中间扫描，如果当前两个指针指向的数的和正好是target，那么就保存当前数对 (防止重复就跳过相同值)<br>这个方法找多个就很麻烦了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">    <span class="keyword">int</span> len = nums.size();</div><div class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numsTmp = nums;</div><div class="line">    sort(nums.begin(), nums.end()); <span class="comment">//使得有序</span></div><div class="line"></div><div class="line">    <span class="comment">//收尾指针法</span></div><div class="line">    <span class="keyword">int</span> sta = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = len - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (sta &lt; end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (nums[sta] + nums[end] == target)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">bool</span> f1 = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">bool</span> f2 = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)<span class="comment">//排序队列找到了，还要去原来队列找到对应的值序列号</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (f1 &amp;&amp; f2)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span> (!f1 &amp;&amp; numsTmp[i] == nums[sta]) <span class="comment">// nums[sta] 可能等于 nums[end]</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    f1 = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!f2 &amp;&amp; numsTmp[i] == nums[end]) <span class="comment">// 这里是else if 不是if</span></div><div class="line">                &#123;</div><div class="line">                    res.push_back(i);</div><div class="line">                    f2 = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[sta] + nums[end] &lt; target)<span class="comment">//单方面递增或递减</span></div><div class="line">        &#123;</div><div class="line">            sta++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>3sum</p>
<ul>
<li>依次对数组中得每一个元素num[i]找和为target-num[i]的连个数，这样问题又回到了2Sum上</li>
</ul>
</li>
<li><p>4sum</p>
<ul>
<li><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;int&gt; &gt; fourSum(<span class="built_in">vector</span>&lt;int&gt; &amp;<span class="built_in">num</span>, int target) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;int&gt; &gt; ret;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">num</span>.size() == <span class="number">0</span>) <span class="built_in">return</span> ret;</div><div class="line"></div><div class="line">    <span class="built_in">sort</span>(<span class="built_in">num</span>.begin(), <span class="built_in">num</span>.end());</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (size_t a = <span class="number">0</span>; a &lt; <span class="built_in">num</span>.size(); ++a)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (a != <span class="number">0</span> &amp;&amp; <span class="built_in">num</span>[a] == <span class="built_in">num</span>[a-<span class="number">1</span>])</div><div class="line">            continue;</div><div class="line">    </div><div class="line">        <span class="keyword">for</span> (size_t b = a + <span class="number">1</span>; b &lt; <span class="built_in">num</span>.size(); ++b)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (b != a + <span class="number">1</span> &amp;&amp; <span class="built_in">num</span>[b] == <span class="built_in">num</span>[b-<span class="number">1</span>])</div><div class="line">                continue;</div><div class="line">        </div><div class="line">            size_t c = b + <span class="number">1</span>;</div><div class="line">            size_t d = <span class="built_in">num</span>.size() - <span class="number">1</span>;</div><div class="line">        </div><div class="line">            <span class="keyword">while</span> (c &lt; d)</div><div class="line">            &#123;</div><div class="line">                const int <span class="built_in">sum</span> = <span class="built_in">num</span>[a] + <span class="built_in">num</span>[b] + <span class="built_in">num</span>[c] + <span class="built_in">num</span>[d];</div><div class="line">            </div><div class="line">                <span class="keyword">if</span> (<span class="built_in">sum</span> &gt; target)</div><div class="line">                    --d;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span> &lt; target)</div><div class="line">                    ++c;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c != b + <span class="number">1</span> &amp;&amp; <span class="built_in">num</span>[c] == <span class="built_in">num</span>[c-<span class="number">1</span>])</div><div class="line">                    ++c;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (d != <span class="built_in">num</span>.size() - <span class="number">1</span> &amp;&amp; <span class="built_in">num</span>[d] == <span class="built_in">num</span>[d+<span class="number">1</span>])</div><div class="line">                    --d;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="built_in">vector</span>&lt;int&gt; result;</div><div class="line">                </div><div class="line">                    result.push_back(<span class="built_in">num</span>[a]);</div><div class="line">                    result.push_back(<span class="built_in">num</span>[b]);</div><div class="line">                    result.push_back(<span class="built_in">num</span>[c]);</div><div class="line">                    result.push_back(<span class="built_in">num</span>[d]);</div><div class="line">                </div><div class="line">                    ret.push_back(result);</div><div class="line">                </div><div class="line">                    ++c;</div><div class="line">                    --d;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;xsum问题&quot;&gt;&lt;a href=&quot;#xsum问题&quot; class=&quot;headerlink&quot; title=&quot;xsum问题&quot;&gt;&lt;/a&gt;xsum问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2sum&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;map结构时间复杂度O(n)&lt;br&gt;map把那些
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
      <category term="算法" scheme="https://xuecat.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>permutation(242)</title>
    <link href="https://xuecat.github.io/2018/08/19/242/"/>
    <id>https://xuecat.github.io/2018/08/19/242/</id>
    <published>2018-08-19T09:32:02.000Z</published>
    <updated>2018-08-19T10:22:13.521Z</updated>
    
    <content type="html"><![CDATA[<p>排列算法<code>stl</code>里面的<code>next_permutation</code>和<code>prev_permutation</code></p>
<h4 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a><code>next_permutation</code></h4><ol>
<li>从尾部开始往前寻找两个相邻的元素,第1个元素i，第2个元素j（从前往后数的），且i&lt;j</li>
<li>在[j,end)中寻找一个最小的k使其满足A[i]&lt;A[k],将i与k交换</li>
<li>[j,last)范围的元素置逆（颠倒排列）</li>
</ol>
<blockquote>
<p>1,3,2-&gt; 2,1,3过程<br>i是1，j是3. k是3；互换后是3,1,2; 由于j是3，逆序就是2,1,3了</p>
</blockquote>
<h4 id="prev-permutation"><a href="#prev-permutation" class="headerlink" title="prev_permutation"></a><code>prev_permutation</code></h4><ol>
<li>从尾部开始往前寻找两个相邻的元素,第1个元素i，第2个元素j（从前往后数的），且i&gt;j</li>
<li>从最尾端开始往前寻找第一个小于i的元素，令它为k, 讲i和k对调</li>
<li>j之后颠倒</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排列算法&lt;code&gt;stl&lt;/code&gt;里面的&lt;code&gt;next_permutation&lt;/code&gt;和&lt;code&gt;prev_permutation&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;next-permutation&quot;&gt;&lt;a href=&quot;#next-permutati
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
      <category term="算法" scheme="https://xuecat.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>c++的currying(241)</title>
    <link href="https://xuecat.github.io/2018/08/09/241/"/>
    <id>https://xuecat.github.io/2018/08/09/241/</id>
    <published>2018-08-08T16:06:25.000Z</published>
    <updated>2018-08-08T16:07:17.114Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Args&gt;</div><div class="line"><span class="function"><span class="keyword">auto</span> <span class="title">partial</span><span class="params">(F f, Args... args)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> [=](<span class="keyword">auto</span>... rest) -&gt; <span class="keyword">auto</span> &#123;<span class="comment">//草这就是c++的lamda，和js c#的完全不同啊，我这个笨蛋第一时间居然没反应过来</span></div><div class="line">        <span class="keyword">return</span> f(args..., rest...);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> &amp; b, <span class="keyword">int</span> c, <span class="keyword">int</span> &amp; d)</span> </span>&#123;</div><div class="line">    b = b + <span class="number">1</span>;</div><div class="line">    d = d + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">11</span>, b = <span class="number">111</span>, c = <span class="number">1111</span>, d = <span class="number">11111</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="string">" b: "</span> &lt;&lt; b &lt;&lt; <span class="string">" c: "</span> &lt;&lt; c &lt;&lt; <span class="string">" d: "</span> &lt;&lt; d &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    partial(demo, a, <span class="built_in">std</span>::ref(b))(c, <span class="built_in">std</span>::ref(d));</div><div class="line"></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="string">" b: "</span> &lt;&lt; b &lt;&lt; <span class="string">" c: "</span> &lt;&lt; c &lt;&lt; <span class="string">" d: "</span> &lt;&lt; d &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;
    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>stl排序(240)</title>
    <link href="https://xuecat.github.io/2018/07/28/240/"/>
    <id>https://xuecat.github.io/2018/07/28/240/</id>
    <published>2018-07-28T08:09:45.000Z</published>
    <updated>2018-07-28T09:16:01.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">以前有笔记，但忘了放哪了，再做一次吧</blockquote>

<p><img src="/picture/240.jpg" alt=""></p>
<ul>
<li>stable_sort</li>
<li>partial_sort</li>
<li>nth_element</li>
<li>partition和stable_partition</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> w&amp; l, <span class="keyword">const</span> w&amp; r)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifunc</span><span class="params">(<span class="keyword">const</span> w&amp; c)</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<h4 id="partial-sort"><a href="#partial-sort" class="headerlink" title="partial_sort"></a>partial_sort</h4><pre><code>只排一部分：`partial_sort(w.begin(),w.beging()+20,w.end(),func)`只对前20个元素排
</code></pre><h4 id="nth-element"><a href="#nth-element" class="headerlink" title="nth_element"></a>nth_element</h4><pre><code>只分界:`nth_element(w.begin(),w.beging()+20,w.end(),func)`
将最后的20个元素放前面，但它不会像前面那个函数，这个函数不会排序，只是单纯放前面
</code></pre><h4 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h4><pre><code>前面俩个只会比较元素，当判断元素属性时呢
`partition(w.begin(), w.end(), ifunc)`功能类似`partial_sort`但比较函数不同
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;以前有笔记，但忘了放哪了，再做一次吧&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/picture/240.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stable_sort&lt;/li&gt;

    
    </summary>
    
      <category term="语言" scheme="https://xuecat.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c++" scheme="https://xuecat.github.io/tags/c/"/>
    
      <category term="stl" scheme="https://xuecat.github.io/tags/stl/"/>
    
  </entry>
  
  <entry>
    <title>mysql检索(239)</title>
    <link href="https://xuecat.github.io/2018/07/13/239/"/>
    <id>https://xuecat.github.io/2018/07/13/239/</id>
    <published>2018-07-12T16:49:11.000Z</published>
    <updated>2018-07-12T16:53:29.982Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Å, å，这是丹麦的</div><div class="line">Ä ä，这是德语的</div><div class="line">A <span class="selector-tag">a</span> 这是英文得</div></pre></td></tr></table></figure>
<p>mysql里校对包含字符时有这些<code>like</code> <code>instr</code> <code>locate</code>,<br>但它们时建立在一个校对规则之上的,<br><code>_unicode_ci</code>不区分大小写<br><code>_general_ci</code>不区分大小写<br><code>*_cs</code>区分大小写<br><code>*_bin</code>用二进制存储</p>
<p>utf8_general_ci 校对速度快，但准确度稍差<br>utf8_unicode_ci 准确度高，但校对速度稍慢(所以最近那个sql问题我该改成这个)</p>
<p>utf8mb4字符集可以保存表情符号.</p>
<p>最后直接限定字符检索才成功，不明白为何改<code>_bin</code>也不成功。唉！<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbp_log_object <span class="keyword">as</span> a <span class="keyword">WHERE</span> <span class="keyword">locate</span>(<span class="string">'Ä'</span> <span class="keyword">collate</span> utf8_bin, a.objectname)&gt;<span class="number">0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="数据库" scheme="https://xuecat.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>orleans(238)</title>
    <link href="https://xuecat.github.io/2018/07/06/238/"/>
    <id>https://xuecat.github.io/2018/07/06/238/</id>
    <published>2018-07-06T13:00:29.000Z</published>
    <updated>2018-07-10T16:00:54.412Z</updated>
    
    <content type="html"><![CDATA[<p>这个亚马逊云素材同步代码是我至今最大坡度的代码<br>第一次有种想早点下班好回去恶补知识的感觉,可惜又不得不加班完成任务。</p>
<ol>
<li>silo 代表一个服务，可以是主节点也可以是副节点</li>
<li><p>grain 可以看作是一个单例进程，队列只有一个，会排队修改数据。相同类型的只要key不同，它们就互相独立</p>
</li>
<li><p>客户端一开始就会连接一个服务即silo.(GrainClient.Initialize)</p>
</li>
<li><p>StreamProvider订阅，无论是隐式还是显式，都要用this.stream.OnNextAsync(data)去分发<br>显式还是隐式都是一个grain，初始化注册订阅后才能使用</p>
</li>
</ol>
<ol>
<li><p>Orleans.Immutable 这个是由于和grain的方法调用传参是一次深拷贝<br>grain之间通信，silo之间通信也是深拷贝。<br>为了避免，所以用这个来控制，避免深拷贝。</p>
</li>
<li><p>Orleans永远不会在执行Task的中途创造另一个Task,所以要求程序代码在执行Task的中途,不要开辟多线程.不然会报错或者会破坏单线程机制.如果真的有需要创造额外的task.</p>
</li>
<li><p><code>StatelessWorker</code>的<code>grain</code>，状态无关类型；可以在集群的多个silo里,每一个silo都创造一个相同标识的Grain。 针对此类grain的请求,都只在第一个接受到请求的silo里执行。 Orleans会在所有此类grain忙的时候,自动增加一个</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个亚马逊云素材同步代码是我至今最大坡度的代码&lt;br&gt;第一次有种想早点下班好回去恶补知识的感觉,可惜又不得不加班完成任务。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;silo 代表一个服务，可以是主节点也可以是副节点&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grain 可以看作是一个单例进程，队列只有一个
    
    </summary>
    
      <category term="C#" scheme="https://xuecat.github.io/categories/C/"/>
    
    
      <category term="分布式" scheme="https://xuecat.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>せいかつの日記(237)</title>
    <link href="https://xuecat.github.io/2018/07/04/237/"/>
    <id>https://xuecat.github.io/2018/07/04/237/</id>
    <published>2018-07-03T16:06:56.000Z</published>
    <updated>2018-08-06T15:11:13.266Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/picture/237.png" alt=""></p>
<hr>
<pre><code>見ないでくたさい、ただ馬鹿な話しです
</code></pre><hr>
<h2 id="2018-7-3"><a href="#2018-7-3" class="headerlink" title="2018/7/3"></a>2018/7/3</h2><p>やっと、reactのプロジェクトおわりました、少しごめなことあるですけれど。</p>
<p>も、次の仕事用意してる</p>
<p>Amazon cloud synchronization</p>
<p>ああ！！メチや　メチや、難しいです；頭もだめちや</p>
<h2 id="2018-7-6"><a href="#2018-7-6" class="headerlink" title="2018/7/6"></a>2018/7/6</h2><p>ああ！あ！　ついに、負け犬をなちゃた<br>残業中に食物をあげで、そんな事はまったく思わなかったです。<br>相手は強すぎる、俺は彼の前に全然駄目です。<br>ちょっとだけない。。。。。、悲しいです。<br>どうするつもり、僕もわからない。<br>せめて答えをもらう</p>
<h2 id="2018-7-9"><a href="#2018-7-9" class="headerlink" title="2018/7/9"></a>2018/7/9</h2><p>山なほと仕事<br>恋は雨上がりのように</p>
<h2 id="2018-7-10"><a href="#2018-7-10" class="headerlink" title="2018/7/10"></a>2018/7/10</h2><p>父さんと母さんがきちゃった、猫も</p>
<h2 id="2018-7-24"><a href="#2018-7-24" class="headerlink" title="2018/7/24"></a>2018/7/24</h2><p>誰でもいい、彼女の事欲しい、ときとぎそう思うた<br>きっと、俺は寂しくすぎた<br>大切にされたかったら　安売りするな。</p>
<h2 id="2018-8-6"><a href="#2018-8-6" class="headerlink" title="2018/8/6"></a>2018/8/6</h2><p>ごめんれ、きっと僕は狡いです、罪がある。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/picture/237.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;見ないでくたさい、ただ馬鹿な話しです
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;2018-7-3&quot;&gt;&lt;a href=&quot;#2018-7-3&quot; class=
    
    </summary>
    
      <category term="生活" scheme="https://xuecat.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="杂项" scheme="https://xuecat.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>decimal类型(236)</title>
    <link href="https://xuecat.github.io/2018/06/30/236/"/>
    <id>https://xuecat.github.io/2018/06/30/236/</id>
    <published>2018-06-30T07:59:25.000Z</published>
    <updated>2018-06-30T11:51:21.734Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据库" scheme="https://xuecat.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="函数和结构" scheme="https://xuecat.github.io/tags/%E5%87%BD%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>js forin顺序(235)</title>
    <link href="https://xuecat.github.io/2018/06/17/235/"/>
    <id>https://xuecat.github.io/2018/06/17/235/</id>
    <published>2018-06-17T06:21:10.000Z</published>
    <updated>2018-06-17T06:46:47.868Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/picture/235.jpg" alt=""></div></div><div class="group-picture-row"></div></div></div>
<pre><code>平时根本没时间写着，只好全缓存，周末更新上来，唉！！
得找个时间再去看下markdown语法了，排版真特么丑。
</code></pre><p>装逼封装了excel读写的js，forin排序居然用到了，笔记下：</p>
<pre><code>js for in顺序，不会按照定义顺序输出；好像浏览器没按以前标准了;
它处理方式是先把当中的非负整数键提出来，排序好输出，然后将剩下的定义时的顺序输出。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="CSS &amp; JS" scheme="https://xuecat.github.io/categories/CSS-JS/"/>
    
    
      <category term="JS" scheme="https://xuecat.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
